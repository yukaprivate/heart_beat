{
	"sout": {
		"prefix": "sout",
		"body": [
			"print('$END$');",
		],
		"description": "標準出力"
	},
	"AppMessage": {
		"prefix": "appm",
		"body": [
			"AppMessage$1",
		],
		"description": "AppMessage"
	},
	"mdof": {
		"prefix": "mdof",
		"body": [
			"MediaQuery.of(context)$0",
		],
		"description": "MediaQuery.of(context)"
	},
	"nvof": {
		"prefix": "nvof",
		"body": [
			"Navigator.of(context)$0",
		],
		"description": "Navigator.of(context)"
	},
	"thof": {
		"prefix": "thof",
		"body": [
			"Theme.of(context)$0",
		],
		"description": "Theme.of(context)"
	},
	"thex": {
		"prefix": "thex",
		"body": [
			"import 'package:flutter/material.dart';",
			"",
			"@immutable",
			"class $1 extends ThemeExtension<$1> {",
			"  const $1({required this.$3,});",
			"",
			"  final $2 $3;",
			"",
			"  @override",
			"  $1 copyWith({$2? $3,}) => $1($3: $3 ?? this.$3,);",
			"",
			"  @override",
			"  $1 lerp(ThemeExtension<$1>? other, double t,) {",
			"    if (other is! $1) { return this; }",
			"",
			"    return $1($3: $2.lerp($3, other.$3, t)!,);",
			"  }",
			"",
			"  @override",
			"  String toString() => '$1($3: $$3)';",
			"}",
		],
		"description": "ThemeExtension"
	},
	"gapwidth": {
		"prefix": "gapw",
		"body": [
			"const SizedBox(width: $1),",
		],
		"description": "SizedBoxを使って余白(gap)を作る"
	},
	"gapheight": {
		"prefix": "gaph",
		"body": [
			"const SizedBox(height: $1),",
		],
		"description": "SizedBoxを使って余白(gap)を作る"
	},
	"exception": {
		"prefix": "exception",
		"body": [
			"import 'package:order_app_package/common/exception/app_exception.dart';",
			"class $1Exception extends AppException {",
			"  const $1Exception():super(message: '$2',);",
			"}",
		],
		"description": "アプリ例外"
	},
	"Freezed": {
		"prefix": "freezed",
		"body": [
			"// ignore: unused_import",
			"import 'package:flutter/foundation.dart';",
			"import 'package:freezed_annotation/freezed_annotation.dart';",
			"",
			"part '$TM_FILENAME_BASE.freezed.dart';",
			"// 以下の1行はDTOなどJSONとDartのクラスを相互変換したい場合のみ残してください",
			"part '$TM_FILENAME_BASE.g.dart';",
			"",
			"@freezed",
			"class $1 with _\\$$1 {",
			"  // ignore: unused_element",
			"  const $1._();",
			"",
			"  const factory $1({",
			"    $2",
			"  }) = _$1;",
			"",
			"  // 以下のメソッドはDTOなどJSONとDartのクラスを相互変換したい場合のみ残してください",
			"  factory $1.fromJson(Map<String, dynamic> json) => _\\$$1FromJson(json);",
			"}"
		],
		"description": "Freezedクラス"
	},
	"StateNotifier": {
		"prefix": "statenotifier",
		"body": [
			"import 'package:flutter/material.dart';",
			"import 'package:hooks_riverpod/hooks_riverpod.dart';",
			"import 'package:order_app_package/presentation/common/router/router.dart';",
			"",
			"final ${2:${1/(.*)/${1:/camelcase}/}}StateNotifierProvider =",
			"  StateNotifierProvider.autoDispose<$1StateNotifier, $1State>((ref) {",
			"    return $1StateNotifier(ref);",
			"  });",
			"",
			"class $1StateNotifier extends StateNotifier<$1State> {",
			"  $1StateNotifier(",
			"    this._ref,",
			"  ) : super(const $1State()) {",
			"    init();",
			"  }",
			"",
			"  final Ref _ref;",
			"  NavigatorState get _navigator => _ref.read(navigatorKeyProvider).currentState!;",
			"",
			"  Future<void> init() async {",
			"    $3",
			"  }",
			"}",
		],
		"description": "StateNotifierクラス"
	},
	"State": {
		"prefix": "state",
		"body": [
			"// ignore: unused_import",
			"import 'package:flutter/foundation.dart';",
			"import 'package:freezed_annotation/freezed_annotation.dart';",
			"",
			"part '$TM_FILENAME_BASE.freezed.dart';",
			"",
			"@freezed",
			"class $1State with _\\$$1State {",
			"  // ignore: unused_element",
			"  const $1State._();",
			"",
			"  const factory $1State({",
			"    $2",
			"  }) = _$1State;",
			"",
			"}"
		],
		"description": "Stateクラス"
	},
	"Screen": {
		"prefix": "screen",
		"body": [
			"import 'package:flutter/material.dart';",
			"import 'package:hooks_riverpod/hooks_riverpod.dart';",
			"",
			"class $1Screen extends ConsumerWidget {",
			"  const $1Screen({super.key,});",
			"",
			"  static const name = '${2:${1/(.*)/${1:/camelcase}/}}';",
			"",
			"  @override",
			"  Widget build(BuildContext context, WidgetRef ref) {",
			"    return Scaffold(",
			"      body: Container(),",
			"    );",
			"  }",
			"}",
		],
		"description": "Screenクラス"
	},
	"UseCase": {
		"prefix": "usecase",
		"body": [
			"import 'package:hooks_riverpod/hooks_riverpod.dart';",
			"",
			"final ${2:${1/(.*)/${1:/camelcase}/}}UseCaseProvider = Provider.autoDispose<$1UseCase>((ref) {",
			"  return $1UseCase(",
			"    sampleRepository: ref.watch(sampleRepositoryProvider),",
			"  );",
			"});",
			"",
			"class $1Input {",
			"  const $1Input({",
			"    required this.sampleProps,",
			"  });",
			"",
			"  final int sampleProps;",
			"}",
			"",
			"class $1Output {",
			"  const $1Output({",
			"    required this.sampleProps,",
			"  });",
			"",
			"  final int sampleProps;",
			"}",
			"",
			"/// TODO: ユースケースの説明",
			"class $1UseCase {",
			"  $1UseCase({",
			"    required this.sampleRepository,",
			"  });",
			"",
			"  final SampleRepository sampleRepository;",
			"",
			"  Future<$1Output> ${2:${1/(.*)/${1:/camelcase}/}}($1Input input) async {",
			"    return $1Output();",
			"  }",
			"}",
		],
		"description": "UseCaseクラス"
	},
	"Entity": {
		"prefix": "entity",
		"body": [
			"import 'package:order_app_package/domain/common/entity.dart';",
			"",
			"class $1 extends Entity {",
			"  $1(",
			"    super.id, {",
			"    required this.$2,",
			"  }) {",
			"    if ($2 == '') {",
			"      throw Exception('コンストラクタで値チェックをするサンプルです');",
			"    }",
			"  }",
			"  final String $2;",
			"}",
		],
		"description": "Entityクラス"
	},
	"ValueObject(Equtable)": {
		"prefix": "valueobjectequtable",
		"body": [
			"import 'package:equatable/equatable.dart';",
			"",
			"class $NAME$ extends Equatable {",
			"  $NAME$(this.value) {",
			"    if (value == null) {",
			"      throw Exception();",
			"    }",
			"  }",
			"",
			"  final double value;",
			"",
			"  @override",
			"  List<Object?> get props => [value];",
			"",
			"  @override",
			"  bool? get stringify => true;",
			"}"
		],
		"description": "値オブジェクトクラス"
	},
	"ValueObject(Freezed)": {
		"prefix": "valueobjectfreezed",
		"body": [
			"// ignore: unused_import",
			"import 'package:flutter/foundation.dart';",
			"import 'package:freezed_annotation/freezed_annotation.dart';",
			"",
			"part '$TM_FILENAME_BASE.freezed.dart';",
			"",
			"@freezed",
			"class $1 with _\\$$1 {",
			"  // ignore: unused_element",
			"  const $1._();",
			"",
			"  const factory $1({",
			"    $2",
			"  }) = _$1;",
			"",
			"}"
		],
		"description": "ValueObjectクラス"
	},
	"Repository(interface)": {
		"prefix": "repository",
		"body": [
			"import 'package:hooks_riverpod/hooks_riverpod.dart';",
			"",
			"// TODO: このProviderをmain.dartの_injectRepositoriesメソッド内でoverrideすること",
			"final ${2:${1/(.*)/${1:/camelcase}/}}RepositoryProvider = Provider.autoDispose<$1Repository>(",
			"  (_) => throw UnimplementedError('${2:${1/(.*)/${1:/camelcase}/}}RepositoryProvider'),",
			");",
			"",
			"/// TODO: Repositoryの説明",
			"abstract class $1Repository {",
			"  $3",
			"}",
		],
		"description": "Repository(interface)クラス"
	},
	"Repository(実装)": {
		"prefix": "repositoryimpl",
		"body": [
			"import 'package:order_app_package/infrastructure/common/helper/firestore_helper.dart';",
			"",
			"class $1RepositoryImpl implements $1Repository {",
			"  const $1RepositoryImpl({",
			"    required FirestoreHelper firestoreHelper,",
			"  }) : _firestoreHelper = firestoreHelper;",
			"",
			"  final FirestoreHelper _firestoreHelper;",
			"",
			"}",
		],
		"description": "Repository(実装)クラス"
	},
	"DTO": {
		"prefix": "dto",
		"body": [
			"import 'package:cloud_firestore/cloud_firestore.dart';",
			"// ignore: unused_import",
			"import 'package:flutter/foundation.dart';",
			"import 'package:freezed_annotation/freezed_annotation.dart';",
			"",
			"part '$TM_FILENAME_BASE.freezed.dart';",
			"part '$TM_FILENAME_BASE.g.dart';",
			"",
			"@freezed",
			"class $1Dto with _\\$$1Dto {",
			"  // ignore: unused_element",
			"  const $1Dto._();",
			"",
			"  const factory $1Dto({",
			"    @JsonKey(ignore: true) String? id,",
			"    $2",
			"  }) = _$1Dto;",
			"",
			"  factory $1Dto.fromJson(Map<String, dynamic> json) => _\\$$1DtoFromJson(json);",
			"",
			"  factory $1Dto.fromFirestore(DocumentSnapshot doc) {",
			"    return $1Dto.fromJson(doc.data() as Map<String, dynamic>).copyWith(id: doc.id);",
			"  }",
			"",
			"}"
		],
		"description": "DTOクラス"
	},
	"utest": {
		"prefix": "utest",
		"body": [
			"import 'package:flutter_test/flutter_test.dart';",
			"import 'package:mockito/mockito.dart';",
			"",
			"// モックが不要な場合は削除してください",
			"class MockHoge extends Mock implements Hoge {}",
			"",
			"void main() {",
			"  MockHoge hoge;",
			"",
			"  setUp(() {",
			"    // 各テストケースが実行される直前に呼びたい処理を記載する",
			"  });",
			"",
			"  group('テストグループ名に書き換える', () {",
			"    test('テスト名に書き換える', () {",
			"      // 準備",
			"",
			"      // 実行",
			"",
			"      // 検証",
			"    });",
			"  });",
			"}"
		],
		"description": "Unit Test"
	},
}
